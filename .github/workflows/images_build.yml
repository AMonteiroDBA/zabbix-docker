name: Build images (DockerHub)

on:
  release:
    types:
      - published
  push:
    branches:
      - '5.0'
      - '6.0'
      - '6.4'
      - 'trunk'
    paths:
      - 'Dockerfiles/**'
      - 'build.json'
      - '!**/README.md'
      - '!Dockerfiles/*/rhel/*'
      - '!Dockerfiles/*/windows/*'
      - '.github/workflows/images_build.yml'

defaults:
  run:
    shell: bash

env:
  DOCKER_REPOSITORY: "zabbix"
  LATEST_BRANCH: ${{ github.event.repository.default_branch }}
  BASE_BUILD_NAME: "build-base"
  MATRIX_FILE: "build.json"

jobs:
  init_build:
    name: Initialize build
    runs-on: ubuntu-latest
    outputs:
      os: ${{ steps.os.outputs.list }}
      database: ${{ steps.database.outputs.list }}
      components: ${{ steps.components.outputs.list }}
      is_default_branch: ${{ steps.branch_info.outputs.is_default_branch }}
      current_branch: ${{ steps.branch_info.outputs.current_branch }}
      branch: ${{ steps.branch_info.outputs.branch }}
    steps:
      - uses: step-security/harden-runner@63c24ba6bd7ba022e95695ff85de572c04a18142 # v2.7.0
        with:
          egress-policy: audit

      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 1
          sparse-checkout: ${{ env.MATRIX_FILE }}

      - name: Check build.json file
        id: build_exists
        run: |
            if [[ ! -f "${{ env.MATRIX_FILE }}" ]]; then
                echo "::error::File ${{ env.MATRIX_FILE }} is missing"
                exit 1
            fi

      - name: Prepare Operating System list
        id: os
        run: |
            os_list=$(jq -r '.["os-linux"] |  keys | [ .[] | tostring ] | @json' "${{ env.MATRIX_FILE }}")

            echo "list=$os_list" >> $GITHUB_OUTPUT

      - name: Prepare Platform list
        id: platform_list
        run: |
            platform_list=$(jq -r '.["os-linux"] | tostring  | @json' "${{ env.MATRIX_FILE }}")

            echo "list=$platform_list" >> $GITHUB_OUTPUT

      - name: Prepare Database engine list
        id: database
        run: |
            database_list=$(jq -r '[.components | values[] ] | sort | unique | del(.. | select ( . == "" ) ) | [ .[] | tostring ] | @json' "${{ env.MATRIX_FILE }}")

            echo "list=$database_list" >> $GITHUB_OUTPUT

      - name: Prepare Zabbix component list
        id: components
        run: |
            component_list=$(jq -r '.components | keys | [ .[] | tostring ] | @json' "./build.json")

            echo "list=$component_list" >> $GITHUB_OUTPUT

      - name: Get branch info
        id: branch_info
        run: |
            github_ref="${{ github.ref }}"
            result=false

            if [[ "$github_ref" == "refs/tags/"* ]]; then
                github_ref=${github_ref%.*}
            fi

            github_ref=${github_ref##*/}

            if [[ "$github_ref" == "${{ env.LATEST_BRANCH }}" ]]; then
                result=true
            fi
            echo "is_default_branch=$result" >> $GITHUB_OUTPUT
            echo "current_branch=$github_ref" >> $GITHUB_OUTPUT
            echo "branch=${GITHUB_HEAD_REF:-${GITHUB_REF#refs/heads/}}" >> $GITHUB_OUTPUT

  build_base:
    timeout-minutes: 30
    name: Build base on ${{ matrix.os }}
    needs: init_build
    strategy:
      fail-fast: false
      matrix:
        os: ${{ fromJson(needs.init_build.outputs.os) }}

    runs-on: ubuntu-latest
    steps:
      - uses: step-security/harden-runner@63c24ba6bd7ba022e95695ff85de572c04a18142 # v2.7.0
        with:
          egress-policy: audit

      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 1

      - name: Set up QEMU
        uses: docker/setup-qemu-action@v3
        with:
          image: tonistiigi/binfmt:latest
          platforms: all

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
        with:
          driver-opts: image=moby/buildkit:master

      - name: Login to DockerHub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      - name: Prepare Platform list
        id: platform
        run: |
            platform_list=$(jq -r '.["os-linux"].${{ matrix.os }} | join(",")' "${{ env.MATRIX_FILE }}")
            platform_list="${platform_list%,}"

            echo "list=$platform_list" >> $GITHUB_OUTPUT

      - name: Generate tags (release)
        id: meta_release
        if: ${{ needs.init_build.outputs.current_branch != 'trunk' }}
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.DOCKER_REPOSITORY }}/zabbix-${{ env.BASE_BUILD_NAME }}
          tags: |
            type=semver,pattern={{version}},prefix=${{ matrix.os }}-
            type=semver,pattern={{version}},suffix=-${{ matrix.os }}
            type=ref,event=branch,prefix=${{ matrix.os }}-,suffix=-latest
            type=ref,event=branch,suffix=-${{ matrix.os }}-latest
            type=raw,enable=${{ needs.init_build.outputs.is_default_branch == 'true' }},value=${{matrix.os}}-latest
          flavor: |
            latest=${{ (matrix.os == 'alpine') && ( needs.init_build.outputs.is_default_branch == 'true' ) }}

      - name: Generate tags (trunk)
        id: meta_trunk
        if: ${{ needs.init_build.outputs.current_branch == 'trunk' }}
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.DOCKER_REPOSITORY }}/zabbix-${{ env.BASE_BUILD_NAME }}
          tags: |
            type=ref,event=branch,prefix=${{ matrix.os }}-
            type=ref,event=branch,suffix=-${{ matrix.os }}
          flavor: |
            latest=false

      - name: Build ${{ env.BASE_BUILD_NAME }}/${{ matrix.os }} and push
        id: docker_build
        uses: docker/build-push-action@v5
        with:
          context: ./Dockerfiles/${{ env.BASE_BUILD_NAME }}/${{ matrix.os }}
          file: ./Dockerfiles/${{ env.BASE_BUILD_NAME }}/${{ matrix.os }}/Dockerfile
          platforms: ${{ steps.platform.outputs.list }}
          push: ${{ secrets.AUTO_PUSH_IMAGES }}
          tags: ${{ steps.meta_release.conclusion == 'skipped' && steps.meta_trunk.outputs.tags || steps.meta_release.outputs.tags }}
          labels: |
            org.opencontainers.image.revision=${{ steps.meta_release.conclusion == 'skipped' && fromJSON(steps.meta_trunk.outputs.json).labels['org.opencontainers.image.revision'] || fromJSON(steps.meta_release.outputs.json).labels['org.opencontainers.image.revision'] }}
            org.opencontainers.image.created=${{ steps.meta_release.conclusion == 'skipped' && fromJSON(steps.meta_trunk.outputs.json).labels['org.opencontainers.image.created'] || fromJSON(steps.meta_release.outputs.json).labels['org.opencontainers.image.created'] }}
