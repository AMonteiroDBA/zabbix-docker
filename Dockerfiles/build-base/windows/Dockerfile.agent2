# syntax=docker/dockerfile:1
# escape=`
ARG BUILD_BASE_IMAGE=mcr.microsoft.com/windows/servercore:ltsc2022
FROM $BUILD_BASE_IMAGE as builder_base

ARG PCRE2_VERSION=10.43
ARG OPENSSL_VERSION=3.3.0
ARG GOLANG_VERSION=1.22.3
ARG SEVEN_ZIP_VERSION=2405

ARG BUILD_ARCH=x64
ARG CPU_MODEL=AMD64

ARG MAJOR_VERSION=7.0
ARG ZBX_VERSION=${MAJOR_VERSION}

ARG GIT_URL=https://github.com/git-for-windows/git/releases/download/v2.33.0.windows.2/MinGit-2.33.0.2-busybox-64-bit.zip
ARG SEVEN_ZIP_URL=https://www.7-zip.org/a/7z$SEVEN_ZIP_VERSION-$BUILD_ARCH.msi

ARG MINGW_URL=https://github.com/niXman/mingw-builds-binaries/releases/download/13.2.0-rt_v11-rev1/x86_64-13.2.0-release-win32-seh-ucrt-rt_v11-rev1.7z
ARG VS_BUILDTOOLS_URL=https://aka.ms/vs/17/release/vs_buildtools.exe
ARG GOLANG_URL=https://go.dev/dl/go$GOLANG_VERSION.windows-amd64.zip
ARG MSYS2_URL=https://repo.msys2.org/distrib/x86_64/msys2-base-x86_64-20240507.sfx.exe

ARG PCRE2_URL=https://github.com/PhilipHazel/pcre2/releases/download/pcre2-$PCRE2_VERSION/pcre2-$PCRE2_VERSION.zip
ARG OPENSSL_URL=https://www.openssl.org/source/openssl-$OPENSSL_VERSION.tar.gz

ENV ZBX_VERSION=$ZBX_VERSION `
    BUILD_ARCH=$BUILD_ARCH CPU_MODEL=$CPU_MODEL `
    GIT_URL=$GIT_URL SEVEN_ZIP_VERSION=$SEVEN_ZIP_VERSION `
    MINGW_URL=$MINGW_URL VS_BUILDTOOLS_URL=$VS_BUILDTOOLS_URL GOLANG_VERSION=$GOLANG_VERSION MSYS2_URL=$MSYS2_URL `
    PCRE2_VERSION=$PCRE2_VERSION OPENSSL_VERSION=$OPENSSL_VERSION `
    PCRE2_URL=$PCRE2_URL OPENSSL_URL=$OPENSSL_URL

LABEL org.opencontainers.image.title="Zabbix agent 2 build base for Windows" `
      org.opencontainers.image.authors="Alexey Pustovalov <alexey.pustovalov@zabbix.com>" `
      org.opencontainers.image.vendor="Zabbix SIA" `
      org.opencontainers.image.url="https://zabbix.com/" `
      org.opencontainers.image.description="Zabbix build base image contains all required packages to build Zabbix agent 2 images" `
      org.opencontainers.image.licenses="AGPL v3.0" `
      org.opencontainers.image.documentation="https://www.zabbix.com/documentation/${MAJOR_VERSION}/manual/installation/containers" `
      org.opencontainers.image.version="${ZBX_VERSION}"

SHELL ["powershell", "-Command", "$ErrorActionPreference = 'Stop'; $ProgressPreference = 'SilentlyContinue';"]

RUN Set-Location -Path $env:SystemDrive\.; `
    [Net.ServicePointManager]::SecurityProtocol = [Net.SecurityProtocolType]::Tls12; `
    `
    $env:PATH = [string]::Format('{0}\mingw64\bin;{0}\go\bin;{0}\git\cmd;{0}\git\mingw64\bin;{0}\git\usr\bin;{1}\7-Zip;', $env:SystemDrive, ${env:ProgramFiles}) + $env:PATH; `
    $env:PATH = $env:PATH + [string]::Format(';{0}\msys64\usr\bin;{0}\msys64\ucrt64\bin;{0}\msys64\mingw64\bin', $env:SystemDrive); `
    [Environment]::SetEnvironmentVariable('PATH', $env:PATH, [EnvironmentVariableTarget]::Machine); `
    `
    $env:BUILD_OUTPUT = [string]::Format('{0}\build_output', $env:SystemDrive); `
    [Environment]::SetEnvironmentVariable('BUILD_OUTPUT', $env:BUILD_OUTPUT, [EnvironmentVariableTarget]::Machine); `
    $env:BUILD_SRC = [string]::Format('{0}\build_src', $env:SystemDrive); `
    [Environment]::SetEnvironmentVariable('BUILD_SRC', $env:BUILD_SRC, [EnvironmentVariableTarget]::Machine); `
    `
    Write-Host ('Downloading {0} ...' -f $env:GIT_URL); `
    Invoke-WebRequest -OutFile $env:TEMP\git.zip -Uri $env:GIT_URL; `
    `
    $sha256 = '273f55e881094d00877d64f56570b0c997c4da5dedcb26738d56481033c1eba1'; `
    $d_sha256 = (Get-FileHash $env:TEMP\git.zip -Algorithm sha256).Hash; `
    Write-Host ('Verifying SHA256 ({0}) ...' -f $sha256); `
    if ($d_sha256 -ne $sha256) { `
        Write-Host ('Checksum GIT for Windows ({0}) failed!' -f $d_sha256); `
        exit 1; `
    }; `
    `
    Write-Host ('Downloading {0} ...' -f $env:SEVEN_ZIP_URL); `
    Invoke-WebRequest -OutFile $env:TEMP\7z.msi -Uri $env:SEVEN_ZIP_URL; `
    `
    $sha256 = '0F6AA6596D418B1694F62C8583DE05D24589B8D7FFACCE5A7DAB52AE71F832B6'; `
    $d_sha256 = (Get-FileHash $env:TEMP\7z.msi -Algorithm sha256).Hash; `
    Write-Host ('Verifying SHA256 ({0}) ...' -f $sha256); `
    if ($d_sha256 -ne $sha256) { `
        Write-Host ('Checksum 7-zip ({0}) failed!' -f $d_sha256); `
        exit 1; `
    }; `
    `
    Write-Host ('Downloading {0} ...' -f $env:GOLANG_URL); `
    Invoke-WebRequest -OutFile $env:TEMP\go_lang.zip -Uri $env:GOLANG_URL; `
    `
    $sha256 = 'cab2af6951a6e2115824263f6df13ff069c47270f5788714fa1d776f7f60cb39'; `
    $d_sha256 = (Get-FileHash $env:TEMP\go_lang.zip -Algorithm sha256).Hash; `
    Write-Host ('Verifying SHA256 ({0}) ...' -f $sha256); `
    if ($d_sha256 -ne $sha256) { `
        Write-Host ('Checksum Go Lang ({0}) failed!' -f $d_sha256); `
        exit 1; `
    }; `
    `
    Write-Host ('Downloading {0} ...' -f $env:MINGW_URL); `
    Invoke-WebRequest -OutFile $env:TEMP\mingw.7z -Uri $env:MINGW_URL; `
    `
    $sha256 = '74ca64c55220edd3196681782fbff653c2b9cb4f427f9e532ab6e9a0823dc997'; `
    $d_sha256 = (Get-FileHash $env:TEMP\mingw.7z -Algorithm sha256).Hash; `
    Write-Host ('Verifying SHA256 ({0}) ...' -f $sha256); `
    if ($d_sha256 -ne $sha256) { `
        Write-Host ('Checksum Mingw-w64 ({0}) failed!' -f $d_sha256); `
        exit 1; `
    }; `
    `
    Write-Host ('Downloading {0} ...' -f $env:MSYS2_URL); `
    Invoke-WebRequest -OutFile $env:TEMP\msys2-base-x86_64-20240507.tar.xz -Uri https://repo.msys2.org/distrib/x86_64/msys2-base-x86_64-20240507.tar.xz; `
    `
    $sha256 = 'D96C53ECBFA4B9D81F6C58077965BB2E31472A8BDA4D4446EF8F45F9C601B11D'; `
    $d_sha256 = (Get-FileHash $env:TEMP\msys2-base-x86_64-20240507.tar.xz -Algorithm sha256).Hash; `
    Write-Host ('Verifying SHA256 ({0}) ...' -f $sha256); `
    if ($d_sha256 -ne $sha256) { `
        Write-Host ('Checksum MSYS2 ({0}) failed!' -f $d_sha256); `
#        exit 1; `
    }; `
    `
    Write-Host ('Downloading {0} ...' -f $env:VS_BUILDTOOLS_URL); `
    Invoke-WebRequest -OutFile $env:TEMP\vs_buildtools.exe $env:VS_BUILDTOOLS_URL; `
    `
    Write-Host 'Installing GIT...'; `
    Expand-Archive `
        -Path $env:TEMP\git.zip `
        -DestinationPath $env:SystemDrive\git\.; `
    Write-Host 'Removing downloaded...'; `
    `
    Write-Host 'Verifying install ("git version") ...'; `
    git version; `
    `
    Write-Host 'Installing 7z...'; `
    Start-Process `
        -FilePath $env:TEMP\7z.msi `
        -Wait `
        -ArgumentList '/qn /norestart'; `
    `
    Write-Host 'Verifying install ("7z -h") ...'; `
    7z -h | Select -first 2; `
    `
    Write-Host 'Installing Go Lang...'; `
    Expand-Archive -Path $env:TEMP\go_lang.zip -DestinationPath $env:SystemDrive\; `
    `
    Write-Host 'Verifying install ("go version") ...'; `
    go version; `
    `
    Write-Host 'Installing Mingw-w64...'; `
    7z x $env:TEMP\mingw.7z; `
    `
    Write-Host 'Verifying install ("gcc -v") ...'; `
    gcc -v; `
    `
    Write-Host 'Installing MSYS2...'; `
    Set-Location -Path $env:SystemDrive\.; `
    7z x $env:TEMP\msys2-base-x86_64-20240507.tar.xz; `
    7z x $env:SystemDrive\msys2-base-x86_64-20240507.tar; `
    sh --login -c 'pacman -Syuu --needed --noconfirm --ask=20'; `
    sh --login -c 'pacman -Syu --noconfirm'; `
    sh --login -c 'pacman --sync --quiet --noconfirm mingw-w64-ucrt-x86_64-cmake'; `
    `
    Write-Host 'Verifying install ("sh --version") ...'; `
    sh.exe --version; `
    `
    Write-Host ('{0} - Visual Studio components installing...' -f $(Get-Date -format 'u')); `
    cmd /C start /w $env:TEMP\vs_buildtools.exe `
        --quiet `
        --wait `
        --norestart `
        --nocache `
        --installPath """${env:ProgramFiles(x86)}\Microsoft Visual Studio\2022\BuildTools""" `
        --channelUri https://aka.ms/vs/17/release/channel `
        --installChannelUri https://aka.ms/vs/17/release/channel `
        --channelId VisualStudio.17.Release `
        # https://docs.microsoft.com/en-us/visualstudio/install/workload-component-id-vs-build-tools?view=vs-2022
        --add Microsoft.VisualStudio.Component.VC.Tools.x86.x64; `
    if ($err = dir $Env:TEMP -Filter dd_setup_*_errors.log | where Length -gt 0 | Get-Content) { `
        throw $err; `
    }; `
    Wait-Process -name msiexec; `
    Write-Host ('{0} - Visual Studio components installed' -f $(Get-Date -format 'u')); `
    `
    $env:VS_PATH = &(Join-Path ${env:ProgramFiles(x86)} """\Microsoft Visual Studio\Installer\vswhere.exe""") -latest -products Microsoft.VisualStudio.Product.BuildTools -property installationPath; `
    [Environment]::SetEnvironmentVariable('VS_PATH', $env:VS_PATH, [EnvironmentVariableTarget]::Machine); `
    `
    Write-Host 'Visual Studio components installation cleanup'; `
    Get-ChildItem -Path """${env:ProgramFiles(x86)}\Microsoft Visual Studio\Installer""" -Directory -Recurse | Remove-Item -Force -Recurse; `
    `
    Write-Host 'Removing downloaded...'; `
    Remove-Item -Force -Recurse $env:SystemDrive\msys64; `
    Remove-Item -Force -Recurse $env:TEMP\*;
